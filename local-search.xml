<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>QML语法基础</title>
    <link href="/2025/02/18/QML%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/02/18/QML%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="QML-语法基础"><a href="#QML-语法基础" class="headerlink" title="QML 语法基础"></a>QML 语法基础</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>QML（Qt Meta-Object Language）是一种用于描述应用程序用户界面的声明式编程语言。它允许开发者通过定义对象及其属性来构建用户界面，并且支持动态交互和组件复用。QML 的语法简洁直观，适合快速开发复杂的用户界面。</p><h2 id="导入语句"><a href="#导入语句" class="headerlink" title="导入语句"></a>导入语句</h2><p>在 QML 文档中，可以通过 <code>import</code> 语句导入所需的模块或文件。导入语句的通用形式如下：</p><ul><li><p>导入版本化的命名空间：  </p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> Namespace VersionMajor.VersionMinor<br></code></pre></td></tr></table></figure><p>例如：  </p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> QtQuick <span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure></li><li><p>导入相对目录：  </p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;directory&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>导入 JavaScript 文件：  </p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;file.js&quot;</span> <span class="hljs-keyword">as</span> ScriptIdentifier<br></code></pre></td></tr></table></figure></li></ul><h2 id="对象声明"><a href="#对象声明" class="headerlink" title="对象声明"></a>对象声明</h2><p>QML 中的对象声明用于定义对象及其属性。每个对象声明包含以下部分：</p><ol><li><strong>对象类型的名称</strong>：例如 <code>Rectangle</code>。</li><li><strong>花括号 <code>&#123;&#125;</code></strong>：用于包裹对象的属性和子对象。</li><li><strong>属性和子对象</strong>：在花括号中定义。</li></ol><p>示例：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-title">Rectangle</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;green&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码定义了一个 <code>Rectangle</code> 对象，并设置了其宽度、高度和颜色属性。</p><h3 id="单行声明"><a href="#单行声明" class="headerlink" title="单行声明"></a>单行声明</h3><p>如果对象属性较少，可以将所有属性写在一行中，用分号分隔：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-title">Rectangle</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">300</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">200</span>; <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;green&quot;</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="子对象"><a href="#子对象" class="headerlink" title="子对象"></a>子对象</h2><p>QML 支持通过嵌套对象声明来定义子对象。这种方式可以构建复杂的对象树结构。</p><p>示例：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-title">Rectangle</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;green&quot;</span><br><br>    <span class="hljs-title">Text</span> &#123;<br>        <span class="hljs-attribute">anchors.centerIn</span>: <span class="hljs-built_in">parent</span><br>        <span class="hljs-attribute">text</span>: <span class="hljs-string">&quot;Hello, QML!&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Text</code> 对象是 <code>Rectangle</code> 对象的子对象，并且通过 <code>anchors.centerIn</code> 属性将其居中显示。</p><h3 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h3><p>QML 中的父子关系有两种：</p><ol><li><strong>对象树中的父子关系</strong>：通过嵌套对象声明定义。</li><li><strong>视觉场景中的父子关系</strong>：由 <code>Item</code> 类型提供，用于控制可视化元素的层次结构。</li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>QML 的注释语法与 JavaScript 类似：</p><ul><li><strong>单行注释</strong>：以 <code>//</code> 开头。</li><li><strong>多行注释</strong>：以 <code>/*</code> 开头，以 <code>*/</code> 结尾。</li></ul><p>示例：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-title">Text</span> &#123;<br>    <span class="hljs-attribute">text</span>: <span class="hljs-string">&quot;Hello QML!&quot;</span>  <span class="hljs-comment">// 单行注释</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        多行注释</span><br><span class="hljs-comment">        用于解释复杂的代码逻辑</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-attribute">font.family</span>: <span class="hljs-string">&quot;Helvetica&quot;</span><br>    <span class="hljs-attribute">font.pointSize</span>: <span class="hljs-number">24</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注释的作用包括：</p><ul><li>提高代码的可读性。</li><li>临时禁用代码以调试问题。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>QML 是一种强大的声明式语言，适合快速构建用户界面。通过导入模块、声明对象及其属性，开发者可以轻松创建复杂的 UI 结构。QML 的语法简洁直观，结合注释的使用，能够显著提高代码的可维护性和可读性。</p><hr><p><strong>参考链接</strong>：</p><ul><li><a href="https://doc.qt.io/qt-5/qml-tutorial.html">QML 官方文档</a></li><li><a href="https://doc.qt.io/qt-5/qtquick-index.html">Qt Quick 入门指南</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>QML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git报错： Failed to connect to github.com port 443 解决方案</title>
    <link href="/2016/06/10/Git%E6%8A%A5%E9%94%99%EF%BC%9A%20Failed%20to%20connect%20to%20github.com%20port%20443%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2016/06/10/Git%E6%8A%A5%E9%94%99%EF%BC%9A%20Failed%20to%20connect%20to%20github.com%20port%20443%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p><strong>第一种情况自己有vpn</strong>，网页可以打开github。说明命令行在拉取&#x2F;推送代码时并没有使用<a href="https://so.csdn.net/so/search?q=vpn&spm=1001.2101.3001.7020">vpn</a>进行代理</p><p><strong>第二种情况没有vpn</strong>，这时可以去某些网站上找一些<a href="https://so.csdn.net/so/search?q=%E4%BB%A3%E7%90%86ip&spm=1001.2101.3001.7020">代理ip</a>+port</p><p>解决办法：配置http代理Windows、Linux、Mac OS 中 git 命令相同：</p><p><strong>配置socks5代理</strong></p><pre><code class="hljs">git config --global http.proxy socks5 127.0.0.1:7890git config --global https.proxy socks5 127.0.0.1:7890</code></pre><p><strong>配置http代理</strong></p><pre><code class="hljs">git config --global http.proxy 127.0.0.1:7890git config --global https.proxy 127.0.0.1:7890</code></pre><p><strong>注意：</strong></p><p><strong>命令中的主机号</strong>（127.0.0.1）是使用的代理的主机号(自己电脑有vpn那么本机可看做访问github的代理主机)，即填入127.0.0.1即可，否则填入代理主机 ip(就是网上找的那个ip)<br><strong>命令中的端口号</strong>（7890）为代理软件(代理软件不显示端口的话，就去Windows中的代理服务器设置中查看)或代理主机的监听IP，可以从代理服务器配置中获得，否则填入网上找的那个端口port </p><p>socks5和http两种协议由使用的代理软件决定，不同软件对这两种协议的支持有差异，如果不确定可以都尝试一下<br><strong>主机号和端口号可在代理的位置查看(自己有vpn的需要查看)</strong></p><p><strong>查看代理命令</strong></p><pre><code class="hljs">git config --global --get http.proxygit config --global --get https.proxy</code></pre><p><strong>取消代理命令</strong></p><pre><code class="hljs">git config --global --unset http.proxygit config --global --unset https.proxy</code></pre>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
