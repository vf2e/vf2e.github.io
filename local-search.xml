<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>QML语法基础</title>
    <link href="/2025/02/18/QML%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/02/18/QML%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="QML-语法基础"><a href="#QML-语法基础" class="headerlink" title="QML 语法基础"></a>QML 语法基础</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>QML（Qt Meta-Object Language）是一种用于描述应用程序用户界面的声明式编程语言。它允许开发者通过定义对象及其属性来构建用户界面，并且支持动态交互和组件复用。QML 的语法简洁直观，适合快速开发复杂的用户界面。</p><h2 id="导入语句"><a href="#导入语句" class="headerlink" title="导入语句"></a>导入语句</h2><p>在 QML 文档中，可以通过 <code>import</code> 语句导入所需的模块或文件。导入语句的通用形式如下：</p><ul><li><p>导入版本化的命名空间：  </p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> Namespace VersionMajor.VersionMinor<br></code></pre></td></tr></table></figure><p>例如：  </p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> QtQuick <span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure></li><li><p>导入相对目录：  </p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;directory&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>导入 JavaScript 文件：  </p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;file.js&quot;</span> <span class="hljs-keyword">as</span> ScriptIdentifier<br></code></pre></td></tr></table></figure></li></ul><h2 id="对象声明"><a href="#对象声明" class="headerlink" title="对象声明"></a>对象声明</h2><p>QML 中的对象声明用于定义对象及其属性。每个对象声明包含以下部分：</p><ol><li><strong>对象类型的名称</strong>：例如 <code>Rectangle</code>。</li><li><strong>花括号 <code>&#123;&#125;</code></strong>：用于包裹对象的属性和子对象。</li><li><strong>属性和子对象</strong>：在花括号中定义。</li></ol><p>示例：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-title">Rectangle</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;green&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码定义了一个 <code>Rectangle</code> 对象，并设置了其宽度、高度和颜色属性。</p><h3 id="单行声明"><a href="#单行声明" class="headerlink" title="单行声明"></a>单行声明</h3><p>如果对象属性较少，可以将所有属性写在一行中，用分号分隔：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-title">Rectangle</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">300</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">200</span>; <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;green&quot;</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="子对象"><a href="#子对象" class="headerlink" title="子对象"></a>子对象</h2><p>QML 支持通过嵌套对象声明来定义子对象。这种方式可以构建复杂的对象树结构。</p><p>示例：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-title">Rectangle</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;green&quot;</span><br><br>    <span class="hljs-title">Text</span> &#123;<br>        <span class="hljs-attribute">anchors.centerIn</span>: <span class="hljs-built_in">parent</span><br>        <span class="hljs-attribute">text</span>: <span class="hljs-string">&quot;Hello, QML!&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Text</code> 对象是 <code>Rectangle</code> 对象的子对象，并且通过 <code>anchors.centerIn</code> 属性将其居中显示。</p><h3 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h3><p>QML 中的父子关系有两种：</p><ol><li><strong>对象树中的父子关系</strong>：通过嵌套对象声明定义。</li><li><strong>视觉场景中的父子关系</strong>：由 <code>Item</code> 类型提供，用于控制可视化元素的层次结构。</li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>QML 的注释语法与 JavaScript 类似：</p><ul><li><strong>单行注释</strong>：以 <code>//</code> 开头。</li><li><strong>多行注释</strong>：以 <code>/*</code> 开头，以 <code>*/</code> 结尾。</li></ul><p>示例：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-title">Text</span> &#123;<br>    <span class="hljs-attribute">text</span>: <span class="hljs-string">&quot;Hello QML!&quot;</span>  <span class="hljs-comment">// 单行注释</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        多行注释</span><br><span class="hljs-comment">        用于解释复杂的代码逻辑</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-attribute">font.family</span>: <span class="hljs-string">&quot;Helvetica&quot;</span><br>    <span class="hljs-attribute">font.pointSize</span>: <span class="hljs-number">24</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注释的作用包括：</p><ul><li>提高代码的可读性。</li><li>临时禁用代码以调试问题。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>QML 是一种强大的声明式语言，适合快速构建用户界面。通过导入模块、声明对象及其属性，开发者可以轻松创建复杂的 UI 结构。QML 的语法简洁直观，结合注释的使用，能够显著提高代码的可维护性和可读性。</p><hr><p><strong>参考链接</strong>：</p><ul><li><a href="https://doc.qt.io/qt-5/qml-tutorial.html">QML 官方文档</a></li><li><a href="https://doc.qt.io/qt-5/qtquick-index.html">Qt Quick 入门指南</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>QML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式数据库的架构</title>
    <link href="/2018/05/13/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%B6%E6%9E%84/"/>
    <url>/2018/05/13/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式数据库的架构"><a href="#分布式数据库的架构" class="headerlink" title="分布式数据库的架构"></a>分布式数据库的架构</h1><p>分布式数据库系统通过将数据分散存储在多个物理节点上来实现数据的全局共享和高效管理。在此过程中，它需要具备良好的架构设计，以确保数据访问的透明性、分布式管理的高效性以及系统的高可用性。本文将详细讨论分布式数据库的架构、模式结构以及与并行数据库系统的区别。</p><p><img src="/images/3/2.png"></p><h2 id="一、分布式数据库的架构模式"><a href="#一、分布式数据库的架构模式" class="headerlink" title="一、分布式数据库的架构模式"></a>一、分布式数据库的架构模式</h2><p>分布式数据库系统的架构模式通常由六个层次组成，分为两大部分：下半部分是集中式数据库的模式结构，代表了局部数据库的基本结构；上半部分是分布式数据库系统增加的模式级别。以下是这六个层次的具体分析：</p><h3 id="1-全局外模式（Global-External-Schema）"><a href="#1-全局外模式（Global-External-Schema）" class="headerlink" title="1. 全局外模式（Global External Schema）"></a>1. <strong>全局外模式（Global External Schema）</strong></h3><p>全局外模式是全局应用的用户视图，表示对整个分布式数据库的高层次访问。它是全局概念模式的子集，提供了特定用户需要的数据视图。</p><h3 id="2-全局概念模式（Global-Conceptual-Schema）"><a href="#2-全局概念模式（Global-Conceptual-Schema）" class="headerlink" title="2. 全局概念模式（Global Conceptual Schema）"></a>2. <strong>全局概念模式（Global Conceptual Schema）</strong></h3><p>全局概念模式定义了分布式数据库中数据的整体逻辑结构。数据在全局层面被视为一个单一的实体，根本上没有分布的概念。这一层通常采用关系模型，定义了全局数据库中的关系数据。</p><h3 id="3-分片模式（Fragmentation-Schema）"><a href="#3-分片模式（Fragmentation-Schema）" class="headerlink" title="3. 分片模式（Fragmentation Schema）"></a>3. <strong>分片模式（Fragmentation Schema）</strong></h3><p>分片模式涉及到全局数据的物理划分。每个全局关系被划分为若干个不重叠的片段（数据分片）。分片模式定义了如何将全局关系映射到这些片段上，这种映射是一对多的，即一个全局关系可能对应多个分片。</p><h3 id="4-分布模式（Distribution-Schema）"><a href="#4-分布模式（Distribution-Schema）" class="headerlink" title="4. 分布模式（Distribution Schema）"></a>4. <strong>分布模式（Distribution Schema）</strong></h3><p>分布模式将分片映射到物理节点上，每个数据片段存储在一个或多个结点上。此层次定义了数据片段的存储结点和数据分布策略。分布模式决定了数据的冗余性——如果一个片段存储在多个节点上，则是冗余的分布数据库，反之则为非冗余。</p><h3 id="5-局部概念模式（Local-Conceptual-Schema）"><a href="#5-局部概念模式（Local-Conceptual-Schema）" class="headerlink" title="5. 局部概念模式（Local Conceptual Schema）"></a>5. <strong>局部概念模式（Local Conceptual Schema）</strong></h3><p>局部概念模式描述了各个场地（物理节点）上的数据结构。它包含了分布在同一场地的所有全局概念模式的数据映像。局部概念模式与场地相关，它定义了数据的逻辑结构，确保分布式系统中的数据保持一致性。</p><h3 id="6-局部内模式（Local-Internal-Schema）"><a href="#6-局部内模式（Local-Internal-Schema）" class="headerlink" title="6. 局部内模式（Local Internal Schema）"></a>6. <strong>局部内模式（Local Internal Schema）</strong></h3><p>局部内模式与物理数据库的实现相关，描述了数据在本地存储的具体细节，包括存储结构和数据访问方法。类似于集中式数据库中的内模式，但它还包括全局数据在本地的存储信息。</p><h3 id="6层模式的架构优势："><a href="#6层模式的架构优势：" class="headerlink" title="6层模式的架构优势："></a>6层模式的架构优势：</h3><ul><li><strong>数据分片与数据分配概念的分离</strong>，使得系统在管理数据分布时更加灵活。</li><li><strong>显示控制数据冗余</strong>，数据分配情况在分布模式中清晰可见，便于系统的管理和优化。</li><li><strong>局部DBMS的独立性</strong>，局部场地可以独立工作，避免了对全局数据库系统的过度依赖。</li></ul><h2 id="二、分布式数据库与并行数据库的区别"><a href="#二、分布式数据库与并行数据库的区别" class="headerlink" title="二、分布式数据库与并行数据库的区别"></a>二、分布式数据库与并行数据库的区别</h2><p>分布式数据库系统与并行数据库系统虽然在网络架构上相似，但它们的目标、实现方式和节点角色有显著区别：</p><h3 id="1-应用目标不同"><a href="#1-应用目标不同" class="headerlink" title="1. 应用目标不同"></a>1. <strong>应用目标不同</strong></h3><ul><li><strong>并行数据库系统</strong>的目标是通过并行计算资源提升数据库的性能，充分利用各节点的计算能力。</li><li><strong>分布式数据库系统</strong>主要关注数据的全局共享和场地自治，目的是确保数据在多个地点的透明访问和管理。</li></ul><h3 id="2-实现方式不同"><a href="#2-实现方式不同" class="headerlink" title="2. 实现方式不同"></a>2. <strong>实现方式不同</strong></h3><ul><li>在并行数据库系统中，节点之间通过高速通信网络互联，数据传输代价较低，支持负载均衡，确保高效处理大规模任务。</li><li>在分布式数据库系统中，各节点通过局域网或广域网连接，网络带宽较低，因此数据传输开销较大。此时，查询处理需尽量减少节点间的数据交换。</li></ul><h3 id="3-各节点的角色不同"><a href="#3-各节点的角色不同" class="headerlink" title="3. 各节点的角色不同"></a>3. <strong>各节点的角色不同</strong></h3><ul><li><strong>并行数据库</strong>的所有节点在逻辑上是对等的，它们共同协作处理数据。</li><li><strong>分布式数据库</strong>中的节点既协同处理全局事务，也保有自己的自治性，除了执行全局事务外，它们也负责局部事务的处理和管理。</li></ul><h2 id="三、数据分片与透明性"><a href="#三、数据分片与透明性" class="headerlink" title="三、数据分片与透明性"></a>三、数据分片与透明性</h2><h3 id="1-数据分片"><a href="#1-数据分片" class="headerlink" title="1. 数据分片"></a>1. <strong>数据分片</strong></h3><p>数据分片是分布式数据库系统中的核心概念之一。数据分片使得数据的存储单位变为数据片段，而非一个整体关系。这种划分有助于根据用户需求灵活分配数据存储，同时控制数据冗余度。分片方式主要包括：</p><ul><li><strong>水平分片</strong>：根据行来划分数据。</li><li><strong>垂直分片</strong>：根据列来划分数据。</li><li><strong>混合分片</strong>：结合水平和垂直分片策略。</li><li><strong>导出分片</strong>：根据外部条件进行分片。</li></ul><h3 id="2-分布透明性"><a href="#2-分布透明性" class="headerlink" title="2. 分布透明性"></a>2. <strong>分布透明性</strong></h3><p>分布透明性是指用户或应用程序无需关心数据的物理存储位置和数据如何分片。它可以分为以下几个层次：</p><ul><li><strong>分片透明性</strong>：用户操作时无需考虑数据的分片，系统自动管理分片的映射。</li><li><strong>位置透明性</strong>：用户不需要关心数据片段的存储位置，系统会自动处理。</li><li><strong>局部数据模型透明性</strong>：用户无需关心数据所在的局部数据库使用的具体数据模型。</li></ul><h2 id="四、分布式数据库管理系统（DDBMS）"><a href="#四、分布式数据库管理系统（DDBMS）" class="headerlink" title="四、分布式数据库管理系统（DDBMS）"></a>四、分布式数据库管理系统（DDBMS）</h2><p>分布式数据库管理系统的任务是将用户与分布式数据库隔离，使得用户能够像访问集中式数据库一样访问分布式数据库。虽然物理实现与集中式数据库不同，但在逻辑上，DDBMS为用户提供了一个统一、透明的访问接口。分布式数据库管理系统需解决以下任务：</p><ul><li>数据分片与分配</li><li>数据冗余管理</li><li>查询优化与负载均衡</li><li>事务管理与一致性维护</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分布式数据库的架构通过分层模式确保了数据的透明性、冗余管理和局部自治。这使得系统能够有效管理分布在多个节点上的大规模数据，保证高效的查询处理和数据一致性。虽然分布式数据库与并行数据库在某些方面相似，但其目标、实现方式以及节点角色的不同使得它们各自具有独特的优势和适用场景。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式数据库的架构</title>
    <link href="/2018/05/11/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5/"/>
    <url>/2018/05/11/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式数据库概念解析"><a href="#分布式数据库概念解析" class="headerlink" title="分布式数据库概念解析"></a>分布式数据库概念解析</h1><h2 id="什么是分布式数据库？"><a href="#什么是分布式数据库？" class="headerlink" title="什么是分布式数据库？"></a>什么是分布式数据库？</h2><p>分布式数据库系统是相对于集中式数据库系统而言的，是结合了数据库技术和网络技术的产物。它的定义是：分布式数据库是由一组数据组成的，这些数据分布在计算机网络的不同节点上。网络中的每个节点都具备独立处理能力，成为<strong>自治</strong>的节点，可以执行局部应用，同时也可以通过网络执行全局应用。</p><h3 id="分布式数据库管理系统（DDBMS）"><a href="#分布式数据库管理系统（DDBMS）" class="headerlink" title="分布式数据库管理系统（DDBMS）"></a>分布式数据库管理系统（DDBMS）</h3><p>负责建立、查询、更新、复制、管理和维护分布式数据库的系统称为分布式数据库管理系统（DDBMS）。DDBMS确保数据库的物理分布对用户的透明性，简化了数据的管理。通过DDBMS管理，分布式数据库看起来像是一个统一的系统，用户无需了解数据在网络中各个位置的分布情况。</p><h3 id="分布式数据库系统（DDBS）"><a href="#分布式数据库系统（DDBS）" class="headerlink" title="分布式数据库系统（DDBS）"></a>分布式数据库系统（DDBS）</h3><p>在配置了分布式数据库管理系统并建立了相关应用程序后，形成的计算机网络系统称为分布式数据库系统（DDBS）。分布式数据库管理系统是整个分布式数据库系统的核心。</p><hr><h2 id="分布式数据库的特点"><a href="#分布式数据库的特点" class="headerlink" title="分布式数据库的特点"></a>分布式数据库的特点</h2><h3 id="1-数据的分布性"><a href="#1-数据的分布性" class="headerlink" title="1. 数据的分布性"></a>1. 数据的分布性</h3><p>分布式数据库中的数据分布在不同的网络节点上，区别于传统的集中式数据库。每个节点存储一部分数据，独立进行操作，同时也可以通过网络实现全局的应用。</p><h3 id="2-统一性"><a href="#2-统一性" class="headerlink" title="2. 统一性"></a>2. 统一性</h3><p>分布式数据库通过网络技术将多个局部、分散的数据逻辑上统一成一个单一的数据库，用户体验上就像操作一个集中式数据库。其统一性包括：</p><ul><li><strong>逻辑统一性</strong>：将局部数据库通过统一管理，呈现给用户一个整体。</li><li><strong>管理统一性</strong>：由DDBMS统一管理和维护，区别于分布式文件系统。</li></ul><h3 id="3-透明性"><a href="#3-透明性" class="headerlink" title="3. 透明性"></a>3. 透明性</h3><p>分布式数据库系统通过DDBMS保证了<strong>透明性</strong>，即用户不需要知道数据的存储位置，数据的存储副本等，只需要关心数据的逻辑结构。</p><hr><h2 id="分布式数据库的优势"><a href="#分布式数据库的优势" class="headerlink" title="分布式数据库的优势"></a>分布式数据库的优势</h2><p>与传统的集中式数据库相比，分布式数据库具有以下优势：</p><h3 id="1-坚固性好"><a href="#1-坚固性好" class="headerlink" title="1. 坚固性好"></a>1. 坚固性好</h3><p>由于数据分布在多个节点上，个别节点或通信链路发生故障时，系统仍可继续工作。通过冗余技术，系统能够实现容错，提升了系统的可靠性和可用性。</p><h3 id="2-可扩展性强"><a href="#2-可扩展性强" class="headerlink" title="2. 可扩展性强"></a>2. 可扩展性强</h3><p>分布式数据库可以根据需要灵活增加或减少节点，或者重新配置系统，而不必更换整个大型集中式数据库系统。</p><h3 id="3-性能优化"><a href="#3-性能优化" class="headerlink" title="3. 性能优化"></a>3. 性能优化</h3><p>通过合理分布和冗余，分布式数据库可以实现就近访问，减少了集中式数据库中的瓶颈问题，降低了响应时间，提升了系统的整体效率，并且减少了通信费用。</p><h3 id="4-自治性高"><a href="#4-自治性高" class="headerlink" title="4. 自治性高"></a>4. 自治性高</h3><p>每个节点的数据管理和操作具有自治性，系统中的各节点相互协调，没有主从控制。这使得分布式数据库能够满足各部门对数据的管理与共享需求。</p><hr><h2 id="分布式数据库面临的挑战"><a href="#分布式数据库面临的挑战" class="headerlink" title="分布式数据库面临的挑战"></a>分布式数据库面临的挑战</h2><p>虽然分布式数据库系统有诸多优势，但也面临一些挑战：</p><ol><li><strong>异构数据库集成问题</strong>：目前很难用一个通用的DDBMS来解决不同类型数据库的集成问题。</li><li><strong>数据分布问题</strong>：如果数据库设计不合理，数据分布不科学，可能导致远程访问过多，尤其是复杂的分布连接操作会影响系统性能。</li></ol><hr><h2 id="分布式数据库的分类"><a href="#分布式数据库的分类" class="headerlink" title="分布式数据库的分类"></a>分布式数据库的分类</h2><p>根据不同的标准，分布式数据库可以分为多个类型：</p><h3 id="1-按DDBMS软件同构度划分"><a href="#1-按DDBMS软件同构度划分" class="headerlink" title="1. 按DDBMS软件同构度划分"></a>1. 按DDBMS软件同构度划分</h3><ul><li><strong>同构型分布式数据库</strong>：所有服务器和客户软件使用相同的软件。</li><li><strong>异构型分布式数据库</strong>：服务器和客户端软件不相同。</li></ul><h3 id="2-按局部自治度划分"><a href="#2-按局部自治度划分" class="headerlink" title="2. 按局部自治度划分"></a>2. 按局部自治度划分</h3><ul><li><strong>无局部自治</strong>：对DDBMS的存取必须通过客户端软件。</li><li><strong>有局部自治</strong>：允许局部事务直接访问服务器软件，系统中有一定的局部自治。</li></ul><h3 id="3-按分布透明度划分"><a href="#3-按分布透明度划分" class="headerlink" title="3. 按分布透明度划分"></a>3. 按分布透明度划分</h3><ul><li><strong>高度分布透明</strong>：用户可以操作集成模式而无需涉及片段、分布等信息。</li><li><strong>无分布透明</strong>：用户需要明确指定数据所在位置、片段等信息。</li></ul><hr><h2 id="分布式数据库的目标"><a href="#分布式数据库的目标" class="headerlink" title="分布式数据库的目标"></a>分布式数据库的目标</h2><p>理想的分布式数据库系统应该具备以下12个目标：</p><ol><li><strong>局部结点自治性</strong>：每个结点独立，具有自己的数据库和应用。</li><li><strong>不依赖中心结点</strong>：每个结点可以独立管理事务。</li><li><strong>连续操作</strong>：系统能处理场地加入和撤离而不影响服务。</li><li><strong>位置独立性</strong>：用户无需关心数据的物理存储位置。</li><li><strong>分片独立性</strong>：系统能够透明地分片和访问数据。</li><li><strong>数据复制独立性</strong>：用户无需关心数据的副本，系统自动处理。</li><li><strong>支持分布式查询处理</strong>：能够处理局部、远程和全局查询。</li><li><strong>支持分布式事务管理</strong>：确保事务的一致性和恢复能力。</li><li><strong>硬件独立性</strong>：能够在不同硬件系统上运行。</li><li><strong>操作系统独立性</strong>：支持不同操作系统的运行。</li><li><strong>网络独立性</strong>：能够在不同的通信网络上操作。</li><li><strong>DBMS独立性</strong>：支持异构数据库管理系统的集成。</li></ol><p>这些目标的实现确保了分布式数据库系统对用户来说，表现得像一个非分布式的数据库系统。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分布式数据库通过将数据分布在不同的计算机节点上，并通过分布式数据库管理系统（DDBMS）对数据进行统一管理和透明访问，提供了更高的可靠性、可扩展性和性能。尽管它具有明显的优势，但也面临着异构集成、数据分布等技术挑战。理解和实现分布式数据库系统的核心目标，将帮助企业和开发者更好地应用这一技术来满足现代数据管理的需求。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库的结构与模式</title>
    <link href="/2018/05/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%BB%93%E6%9E%84%E4%B8%8E%E6%A8%A1%E5%BC%8F/"/>
    <url>/2018/05/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%BB%93%E6%9E%84%E4%B8%8E%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库的结构与模式"><a href="#数据库的结构与模式" class="headerlink" title="数据库的结构与模式"></a>数据库的结构与模式</h1><p>数据库技术采用分级的方法将数据库的结构划分为多个层次，最著名的是美国ANSI&#x2F;SPARC数据库系统研究组在1975年提出的三级划分法。这个方法将数据库系统分为三个抽象层次：用户级、概念级和物理级，每一层有其独特的功能和作用。</p><p><img src="/images/3/1.png"></p><h2 id="1-三级抽象"><a href="#1-三级抽象" class="headerlink" title="1. 三级抽象"></a>1. 三级抽象</h2><h3 id="（1）用户级数据库"><a href="#（1）用户级数据库" class="headerlink" title="（1）用户级数据库"></a>（1）用户级数据库</h3><p>用户级数据库对应于<strong>外模式</strong>，是最接近用户的数据库层次。它是用户可以看到和使用的部分，也被称为“用户视图”。用户级数据库主要由外部记录组成，允许不同用户拥有不同的视图，这些视图可以重叠。用户与数据库的所有交互都是通过用户视图来完成的。</p><h3 id="（2）概念级数据库"><a href="#（2）概念级数据库" class="headerlink" title="（2）概念级数据库"></a>（2）概念级数据库</h3><p>概念级数据库对应于<strong>概念模式</strong>，位于用户级和物理级之间。它是所有用户视图的最小并集，并且是数据库管理员（DBA）所能看到和使用的数据库部分。概念级数据库由概念记录组成，它把数据库作为一个整体进行抽象表示。数据库系统中的所有用户视图通过概念级数据库有机结合，概念级数据库需要综合考虑所有用户需求，保证数据一致性，减少冗余，并且准确地反映数据之间的联系。</p><h3 id="（3）物理级数据库"><a href="#（3）物理级数据库" class="headerlink" title="（3）物理级数据库"></a>（3）物理级数据库</h3><p>物理级数据库对应于<strong>内模式</strong>，是数据库的最低层，描述数据如何实际存储在物理介质上。虽然物理级数据库并不直接表示物理存储，但它提供了与物理存储最接近的抽象表示。物理级数据库由内部记录组成，是系统的基础层。</p><h2 id="2-三级模式"><a href="#2-三级模式" class="headerlink" title="2. 三级模式"></a>2. 三级模式</h2><p>数据库系统的三级模式包括<strong>外模式</strong>、<strong>概念模式</strong>和<strong>内模式</strong>，这些模式反映了数据库的不同层级和抽象：</p><h3 id="（1）概念模式"><a href="#（1）概念模式" class="headerlink" title="（1）概念模式"></a>（1）概念模式</h3><p>概念模式描述了整个数据库的逻辑结构，反映了现实世界中的实体、属性和它们之间的关系。概念模式不仅定义了数据的类型和结构，还包括完整性约束条件、记录之间的联系等内容。概念模式是所有用户的公共数据视图，一个数据库只有一个概念模式。概念模式能够确保数据的一致性、完整性，并为后续的外模式和内模式提供支持。</p><h3 id="（2）外模式"><a href="#（2）外模式" class="headerlink" title="（2）外模式"></a>（2）外模式</h3><p>外模式又称为子模式或用户模式，是数据库的用户视图，描述了用户所能看到和使用的数据的逻辑结构。外模式主要关心的是用户如何与数据库交互，包括记录的组成、数据项的特性、数据的安全性和完整性等。一个数据库可以拥有多个外模式，每个外模式针对特定的用户需求和应用程序。</p><h3 id="（3）内模式"><a href="#（3）内模式" class="headerlink" title="（3）内模式"></a>（3）内模式</h3><p>内模式是数据库的最低层，定义了数据的物理存储方式。它涉及记录类型、存储域、数据的物理顺序，以及索引和存储路径等内容。内模式是对数据存储结构的描述，是数据库系统的基础。</p><h2 id="3-两级独立性"><a href="#3-两级独立性" class="headerlink" title="3. 两级独立性"></a>3. 两级独立性</h2><p>数据库的两级独立性是指<strong>物理独立性</strong>和<strong>逻辑独立性</strong>。通过<strong>外模式-概念模式映射</strong>和<strong>概念模式-内模式映射</strong>，数据库实现了三级结构的统一，同时确保了用户应用程序与数据库结构之间的独立性。</p><h3 id="（1）物理独立性"><a href="#（1）物理独立性" class="headerlink" title="（1）物理独立性"></a>（1）物理独立性</h3><p>物理独立性是指数据库应用程序与存储在磁盘上的数据是相互独立的。当数据库的物理存储方式发生变化时，应用程序不需要做出调整。物理独立性通常体现在概念模式和内模式之间的映射转换上。数据库管理员可以改变数据的存储结构，而不影响应用程序的运行。</p><h3 id="（2）逻辑独立性"><a href="#（2）逻辑独立性" class="headerlink" title="（2）逻辑独立性"></a>（2）逻辑独立性</h3><p>逻辑独立性是指数据库应用程序与数据库的逻辑结构是独立的。当数据库的逻辑结构发生变化时，应用程序不需要做出调整。逻辑独立性存在于外模式和概念模式之间的映射转换上。它使得数据库管理员能够灵活调整数据库的逻辑结构，而不影响到用户的应用程序。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>三级抽象与两级独立性是数据库系统设计中的重要概念，通过划分不同的抽象层级（用户级、概念级、物理级），数据库能够在保证数据一致性与完整性的同时，提供灵活的用户视图和存储管理方式。物理独立性和逻辑独立性使得数据库可以在不影响用户应用的情况下进行优化和调整。理解这些概念对于数据库设计和管理至关重要。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据模型</title>
    <link href="/2018/05/10/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/"/>
    <url>/2018/05/10/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><h2 id="1-概念数据模型"><a href="#1-概念数据模型" class="headerlink" title="1.概念数据模型"></a>1.概念数据模型</h2><p>概念数据模型是从用户视角出发，用来描述信息结构和数据关系，通常用于数据库设计阶段。它主要通过**实体—联系模型（Entity-Relationship Model，简称E-R模型）**来表示。E-R模型通过实体（Entity）、属性（Attribute）和实体间的联系（Relationship）来描述现实世界的数据和信息。这种模型通常在开发初期阶段使用，可以帮助设计者清晰地理解和构建数据库的结构。</p><ul><li><strong>实体（Entity）</strong>：是具有独立存在意义的事物，通常是数据库中的一个表格。例如，学生、教师、书籍等。</li><li><strong>属性（Attribute）</strong>：是对实体的具体描述或特征。比如学生实体可能有姓名、学号、出生日期等属性。</li><li><strong>联系（Relationship）</strong>：实体之间的相互关联。例如，学生与课程之间的“选修”关系，或者教师与学生之间的“授课”关系。</li></ul><p>E-R模型为数据库设计提供了一个高层次的抽象，能够帮助开发人员以图形化的方式直观地表示数据结构及其关系。</p><h2 id="2-基本数据模型"><a href="#2-基本数据模型" class="headerlink" title="2.基本数据模型"></a>2.基本数据模型</h2><p>基本数据模型是根据计算机系统的需求对数据进行建模，主要用于数据库管理系统（DBMS）的实现。它们侧重于数据的存储方式、操作方式以及数据完整性，通常由<strong>数据结构、数据操作和完整性约束</strong>三部分组成。</p><ul><li><strong>数据结构</strong>：描述数据库的静态特征，包括数据的组织方式、存储格式等。</li><li><strong>数据操作</strong>：定义如何对数据进行操作（如查询、插入、更新、删除等），以及数据操作的规则。</li><li><strong>完整性约束</strong>：确保数据的准确性和一致性。比如，某些字段的值必须唯一，或某些字段的值必须符合特定的格式等。</li></ul><p>常见的基本数据模型包括层次模型、网状模型、关系模型和面向对象模型。</p><h3 id="2-1-层次模型"><a href="#2-1-层次模型" class="headerlink" title="2.1 层次模型"></a>2.1 层次模型</h3><p>层次模型用树形结构表示实体类型及实体间的联系，实体间的联系通常通过父子关系来表示。层次模型的优点是数据的存取路径是显式的，因此查询效率较高，尤其在查询简单、树形结构明显的数据时。</p><ul><li><p><strong>优点</strong>：</p><ul><li>数据组织通过层次结构进行，关系清晰，查询效率高。</li><li>对于某些类型的应用（如组织结构、目录树等）特别适合。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li><strong>只能表示1:n联系</strong>，如果需要表示m:n联系，通常需要一些复杂的设计手段，这使得模型不够灵活。</li><li>查询和更新操作较为复杂，尤其当数据的层次结构发生变化时，应用程序的修改比较困难。</li><li>在实际应用中，系统的扩展性较差。</li></ul></li></ul><h3 id="2-2-网状模型"><a href="#2-2-网状模型" class="headerlink" title="2.2 网状模型"></a>2.2 网状模型</h3><p>网状模型使用有向图表示实体类型及实体间的联系，其中每条边代表实体间的联系。网状模型的一个显著特点是支持m:n类型的关系，这使得它比层次模型更为灵活。</p><ul><li><p><strong>优点</strong>：</p><ul><li>支持1:n和m:n的联系，结构更为灵活，能够表达复杂的关系。</li><li>查询效率较高，适用于复杂的多对多关系数据。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>编写应用程序比较复杂，需要开发者理解底层的逻辑结构。</li><li>系统的管理和维护较为繁琐，特别是在数据模型变化时，可能需要对应用程序做出较大的调整。</li></ul></li></ul><h3 id="2-3-关系模型"><a href="#2-3-关系模型" class="headerlink" title="2.3 关系模型"></a>2.3 关系模型</h3><p>关系模型是目前最广泛使用的数据模型，它用表格结构来表示数据，每个表代表一个实体类型。表中的列（字段）表示实体的属性，而表与表之间的联系则通过<strong>外键</strong>来表示。关系模型的核心概念基于集合理论，数据通过关系（表）来组织。</p><ul><li><p><strong>优点</strong>：</p><ul><li><strong>数学基础严谨</strong>：关系模型建立在集合理论和关系代数的基础上，具有强大的理论支持。</li><li><strong>结构简单、清晰</strong>：数据库的设计与使用都非常直观，用户容易理解。数据表由行和列组成，列表示属性，行表示数据记录。</li><li><strong>数据独立性</strong>：用户和应用程序不需要了解数据的物理存储方式，可以通过SQL进行操作，简化了开发过程。</li><li><strong>易于维护和扩展</strong>：数据结构的变化对应用程序影响较小，数据库设计的灵活性较高。</li><li><strong>良好的查询能力</strong>：关系模型通过SQL语言提供丰富的数据操作能力，方便用户查询、修改和管理数据。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>对于一些复杂的、层次化的关系，可能需要额外的技巧来设计数据模型。</li><li>在大规模、高并发的应用场景下，可能需要优化索引和查询策略，以确保性能。</li></ul></li></ul><h3 id="2-4-面向对象模型"><a href="#2-4-面向对象模型" class="headerlink" title="2.4 面向对象模型"></a>2.4 面向对象模型</h3><p>面向对象模型将数据库设计与面向对象编程相结合，用<strong>对象</strong>（包括数据和方法）来表示实体。这种模型不仅能存储数据，还能表示行为，适用于一些复杂的数据和行为的关系。</p><ul><li><p><strong>优点</strong>：</p><ul><li>支持多态、继承、封装等面向对象的特性，能够更自然地表达复杂的关系。</li><li>适用于复杂应用，尤其是在需要处理复杂数据结构和行为时。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>相比关系模型，面向对象模型的学习曲线较陡峭，开发和维护更加复杂。</li><li>不如关系模型在大规模数据查询和管理方面高效，尤其是在数据库中的数据结构变化较大的时候。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不同的数据模型各自有其优缺点，选择合适的模型取决于具体的应用场景和需求。在数据库设计和开发过程中，<strong>概念数据模型</strong>帮助我们理解数据和关系的结构，而<strong>基本数据模型</strong>则更注重数据存储和操作的具体实现。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git报错： Failed to connect to github.com port 443 解决方案</title>
    <link href="/2016/06/10/Git%E6%8A%A5%E9%94%99%EF%BC%9A%20Failed%20to%20connect%20to%20github.com%20port%20443%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2016/06/10/Git%E6%8A%A5%E9%94%99%EF%BC%9A%20Failed%20to%20connect%20to%20github.com%20port%20443%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p><strong>第一种情况自己有vpn</strong>，网页可以打开github。说明命令行在拉取&#x2F;推送代码时并没有使用<a href="https://so.csdn.net/so/search?q=vpn&spm=1001.2101.3001.7020">vpn</a>进行代理</p><p><strong>第二种情况没有vpn</strong>，这时可以去某些网站上找一些<a href="https://so.csdn.net/so/search?q=%E4%BB%A3%E7%90%86ip&spm=1001.2101.3001.7020">代理ip</a>+port</p><p>解决办法：配置http代理Windows、Linux、Mac OS 中 git 命令相同：</p><p><strong>配置socks5代理</strong></p><pre><code class="hljs">git config --global http.proxy socks5 127.0.0.1:7890git config --global https.proxy socks5 127.0.0.1:7890</code></pre><p><strong>配置http代理</strong></p><pre><code class="hljs">git config --global http.proxy 127.0.0.1:7890git config --global https.proxy 127.0.0.1:7890</code></pre><p><strong>注意：</strong></p><p><strong>命令中的主机号</strong>（127.0.0.1）是使用的代理的主机号(自己电脑有vpn那么本机可看做访问github的代理主机)，即填入127.0.0.1即可，否则填入代理主机 ip(就是网上找的那个ip)<br><strong>命令中的端口号</strong>（7890）为代理软件(代理软件不显示端口的话，就去Windows中的代理服务器设置中查看)或代理主机的监听IP，可以从代理服务器配置中获得，否则填入网上找的那个端口port </p><p>socks5和http两种协议由使用的代理软件决定，不同软件对这两种协议的支持有差异，如果不确定可以都尝试一下<br><strong>主机号和端口号可在代理的位置查看(自己有vpn的需要查看)</strong></p><p><strong>查看代理命令</strong></p><pre><code class="hljs">git config --global --get http.proxygit config --global --get https.proxy</code></pre><p><strong>取消代理命令</strong></p><pre><code class="hljs">git config --global --unset http.proxygit config --global --unset https.proxy</code></pre>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
